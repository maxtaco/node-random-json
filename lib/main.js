// Generated by IcedCoffeeScript 112.8.1
(function() {
  var iced;

  iced = require('iced-runtime-3');

  (function() {
    var Generator, __iced_it, __iced_passed_deferral, crypto, o;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function*() {
      var __iced_deferrals;
      crypto = require('crypto');
      exports.Generator = Generator = (function() {
        function Generator() {}

        Generator.prototype.byte = function(cb) {
          var __iced_it, __iced_passed_deferral, buf, ex;
          __iced_passed_deferral = iced.findDeferral(arguments);
          __iced_it = (function*() {
            var __iced_deferrals;
            __iced_deferrals = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Generator::byte",
              filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
            });
            crypto.randomBytes(1, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  ex = arguments[0];
                  return buf = arguments[1];
                };
              })(),
              lineno: 7
            }));
            if (__iced_deferrals.await_exit()) {
              yield;
            }
            return cb(buf[0]);
          })();
          __iced_it.next();
          return null;
        };

        Generator.prototype.integer = function(cb, signed) {
          var __iced_it, __iced_passed_deferral, buf, ex, i, r;
          __iced_passed_deferral = iced.findDeferral(arguments);
          __iced_it = (function*() {
            var __iced_deferrals, j;
            __iced_deferrals = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Generator::integer",
              filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
            });
            crypto.randomBytes(4, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  ex = arguments[0];
                  return buf = arguments[1];
                };
              })(),
              lineno: 11
            }));
            if (__iced_deferrals.await_exit()) {
              yield;
            }
            r = 0;
            for (i = j = 0; j < 4; i = ++j) {
              r *= 256;
              r += buf[i];
            }
            if (buf[3] >= 128 && signed) {
              r = 0 - r;
            }
            return cb(r);
          })();
          __iced_it.next();
          return null;
        };

        Generator.prototype.float = function(cb) {
          var __iced_it, __iced_passed_deferral;
          __iced_passed_deferral = iced.findDeferral(arguments);
          __iced_it = (function(_this) {
            var d, n;
            return function*() {
              var __iced_deferrals, __iced_deferrals1;
              __iced_deferrals = new iced.Deferrals(__iced_it, {
                parent: __iced_passed_deferral,
                funcname: "Generator::float",
                filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
              });
              _this.integer(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return n = arguments[0];
                  };
                })(),
                lineno: 20
              }), true);
              if (__iced_deferrals.await_exit()) {
                yield;
              }
              __iced_deferrals1 = new iced.Deferrals(__iced_it, {
                parent: __iced_passed_deferral,
                funcname: "Generator::float",
                filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
              });
              _this.integer(__iced_deferrals1.defer({
                assign_fn: (function() {
                  return function() {
                    return d = arguments[0];
                  };
                })(),
                lineno: 21
              }));
              if (__iced_deferrals1.await_exit()) {
                yield;
              }
              if (d === 0) {
                d = 1;
              }
              return cb(n / d);
            };
          })(this)();
          __iced_it.next();
          return null;
        };

        Generator.prototype.string = function(n, cb) {
          var __iced_it, __iced_passed_deferral;
          __iced_passed_deferral = iced.findDeferral(arguments);
          __iced_it = (function(_this) {
            var buf, ex;
            return function*() {
              var __iced_deferrals, __iced_deferrals1;
              if (!n) {
                __iced_deferrals = new iced.Deferrals(__iced_it, {
                  parent: __iced_passed_deferral,
                  funcname: "Generator::string",
                  filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                });
                _this.integer(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return n = arguments[0];
                    };
                  })(),
                  lineno: 27
                }));
                if (__iced_deferrals.await_exit()) {
                  yield;
                }
                n = n % 200;
              }
              __iced_deferrals1 = new iced.Deferrals(__iced_it, {
                parent: __iced_passed_deferral,
                funcname: "Generator::string",
                filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
              });
              crypto.randomBytes(n, __iced_deferrals1.defer({
                assign_fn: (function() {
                  return function() {
                    ex = arguments[0];
                    return buf = arguments[1];
                  };
                })(),
                lineno: 29
              }));
              if (__iced_deferrals1.await_exit()) {
                yield;
              }
              return cb(buf.toString('base64'));
            };
          })(this)();
          __iced_it.next();
          return null;
        };

        Generator.prototype.array = function(n, cb, d) {
          var __iced_it, __iced_passed_deferral;
          __iced_passed_deferral = iced.findDeferral(arguments);
          __iced_it = (function(_this) {
            var i, r, x;
            return function*() {
              var __iced_deferrals, __iced_deferrals1, j, ref;
              if (!n) {
                __iced_deferrals = new iced.Deferrals(__iced_it, {
                  parent: __iced_passed_deferral,
                  funcname: "Generator::array",
                  filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                });
                _this.integer(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return n = arguments[0];
                    };
                  })(),
                  lineno: 34
                }));
                if (__iced_deferrals.await_exit()) {
                  yield;
                }
                n = n % 10;
              }
              r = [];
              for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                __iced_deferrals1 = new iced.Deferrals(__iced_it, {
                  parent: __iced_passed_deferral,
                  funcname: "Generator::array",
                  filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                });
                _this.json(__iced_deferrals1.defer({
                  assign_fn: (function() {
                    return function() {
                      return x = arguments[0];
                    };
                  })(),
                  lineno: 38
                }), d + 1);
                if (__iced_deferrals1.await_exit()) {
                  yield;
                }
                r[i] = x;
              }
              return cb(r);
            };
          })(this)();
          __iced_it.next();
          return null;
        };

        Generator.prototype.obj = function(n, cb, d) {
          var __iced_it, __iced_passed_deferral;
          if (d == null) {
            d = 0;
          }
          __iced_passed_deferral = iced.findDeferral(arguments);
          __iced_it = (function(_this) {
            var i, k, r, v;
            return function*() {
              var __iced_deferrals, __iced_deferrals1, __iced_deferrals2, j, ref;
              if (!n) {
                __iced_deferrals = new iced.Deferrals(__iced_it, {
                  parent: __iced_passed_deferral,
                  funcname: "Generator::obj",
                  filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                });
                _this.integer(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return n = arguments[0];
                    };
                  })(),
                  lineno: 44
                }));
                if (__iced_deferrals.await_exit()) {
                  yield;
                }
                n %= 8;
              }
              r = {};
              for (i = j = 0, ref = n; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                __iced_deferrals1 = new iced.Deferrals(__iced_it, {
                  parent: __iced_passed_deferral,
                  funcname: "Generator::obj",
                  filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                });
                _this.string(10, __iced_deferrals1.defer({
                  assign_fn: (function() {
                    return function() {
                      return k = arguments[0];
                    };
                  })(),
                  lineno: 48
                }));
                if (__iced_deferrals1.await_exit()) {
                  yield;
                }
                __iced_deferrals2 = new iced.Deferrals(__iced_it, {
                  parent: __iced_passed_deferral,
                  funcname: "Generator::obj",
                  filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                });
                _this.json(__iced_deferrals2.defer({
                  assign_fn: (function() {
                    return function() {
                      return v = arguments[0];
                    };
                  })(),
                  lineno: 49
                }), d + 1);
                if (__iced_deferrals2.await_exit()) {
                  yield;
                }
                r[k] = v;
              }
              return cb(r);
            };
          })(this)();
          __iced_it.next();
          return null;
        };

        Generator.prototype.json = function(cb, d) {
          var __iced_it, __iced_passed_deferral;
          if (d == null) {
            d = 0;
          }
          __iced_passed_deferral = iced.findDeferral(arguments);
          __iced_it = (function(_this) {
            var b, r, ret;
            return function*() {
              var __iced_deferrals, __iced_deferrals1, __iced_deferrals2, __iced_deferrals3, __iced_deferrals4, __iced_deferrals5;
              __iced_deferrals = new iced.Deferrals(__iced_it, {
                parent: __iced_passed_deferral,
                funcname: "Generator::json",
                filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
              });
              _this.byte(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return b = arguments[0];
                  };
                })(),
                lineno: 54
              }));
              if (__iced_deferrals.await_exit()) {
                yield;
              }
              b %= 8;
              ret = null;
              if (d > 4 && b > 5) {
                b %= 5;
              }
              switch (b) {
                case 0:
                  r = false;
                  break;
                case 1:
                  r = true;
                  break;
                case 2:
                  r = null;
                  break;
                case 3:
                  __iced_deferrals1 = new iced.Deferrals(__iced_it, {
                    parent: __iced_passed_deferral,
                    funcname: "Generator::json",
                    filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                  });
                  _this.integer(__iced_deferrals1.defer({
                    assign_fn: (function() {
                      return function() {
                        return r = arguments[0];
                      };
                    })(),
                    lineno: 67
                  }), true);
                  if (__iced_deferrals1.await_exit()) {
                    yield;
                  }
                  break;
                case 4:
                  __iced_deferrals2 = new iced.Deferrals(__iced_it, {
                    parent: __iced_passed_deferral,
                    funcname: "Generator::json",
                    filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                  });
                  _this.float(__iced_deferrals2.defer({
                    assign_fn: (function() {
                      return function() {
                        return r = arguments[0];
                      };
                    })(),
                    lineno: 69
                  }));
                  if (__iced_deferrals2.await_exit()) {
                    yield;
                  }
                  break;
                case 5:
                  __iced_deferrals3 = new iced.Deferrals(__iced_it, {
                    parent: __iced_passed_deferral,
                    funcname: "Generator::json",
                    filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                  });
                  _this.string(null, __iced_deferrals3.defer({
                    assign_fn: (function() {
                      return function() {
                        return r = arguments[0];
                      };
                    })(),
                    lineno: 71
                  }));
                  if (__iced_deferrals3.await_exit()) {
                    yield;
                  }
                  break;
                case 6:
                  __iced_deferrals4 = new iced.Deferrals(__iced_it, {
                    parent: __iced_passed_deferral,
                    funcname: "Generator::json",
                    filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                  });
                  _this.array(null, __iced_deferrals4.defer({
                    assign_fn: (function() {
                      return function() {
                        return r = arguments[0];
                      };
                    })(),
                    lineno: 73
                  }), d);
                  if (__iced_deferrals4.await_exit()) {
                    yield;
                  }
                  break;
                case 7:
                  __iced_deferrals5 = new iced.Deferrals(__iced_it, {
                    parent: __iced_passed_deferral,
                    funcname: "Generator::json",
                    filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
                  });
                  _this.obj(null, __iced_deferrals5.defer({
                    assign_fn: (function() {
                      return function() {
                        return r = arguments[0];
                      };
                    })(),
                    lineno: 75
                  }), d);
                  if (__iced_deferrals5.await_exit()) {
                    yield;
                  }
              }
              return cb(r);
            };
          })(this)();
          __iced_it.next();
          return null;
        };

        return Generator;

      })();
      exports.json = function(cb) {
        var __iced_it, __iced_passed_deferral, g, o;
        __iced_passed_deferral = iced.findDeferral(arguments);
        __iced_it = (function*() {
          var __iced_deferrals;
          g = new Generator();
          __iced_deferrals = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "exports.json",
            filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
          });
          g.json(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return o = arguments[0];
              };
            })(),
            lineno: 82
          }));
          if (__iced_deferrals.await_exit()) {
            yield;
          }
          return cb(o);
        })();
        __iced_it.next();
        return null;
      };
      exports.obj = function(cb, n) {
        var __iced_it, __iced_passed_deferral, g, o;
        if (n == null) {
          n = null;
        }
        __iced_passed_deferral = iced.findDeferral(arguments);
        __iced_it = (function*() {
          var __iced_deferrals;
          g = new Generator();
          __iced_deferrals = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "exports.obj",
            filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
          });
          g.obj(n, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return o = arguments[0];
              };
            })(),
            lineno: 89
          }));
          if (__iced_deferrals.await_exit()) {
            yield;
          }
          return cb(o);
        })();
        __iced_it.next();
        return null;
      };
      if (false) {
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          filename: "/Users/max/g/max/src/node-random-json/src/main.iced"
        });
        exports.obj(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return o = arguments[0];
            };
          })(),
          lineno: 96
        }));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        return console.log(o);
      }
    })();
    __iced_it.next();
    return null;
  }).call(this);

}).call(this);
